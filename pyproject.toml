[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"

[project]
name = "b1prediction"
version = "0.1.0"
description = "B1 prediction from localizer using deep learning"
requires-python = ">=3.10,<3.14"
authors = [{ name = "Felix Zimmermann", email = "felix.zimmermann@ptb.de" }]
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.23,<3.0",
    "torch>=2.6",
    "h5py>=3.0",
    "lightning>=2.0",
    "torchmetrics>=1.0",
    "neptune>=1.14",
    "mrpro @ git+https://github.com/PTB-MR/mrpro@nn",
    "kornia>=0.6",
    "einops>=0.6",
    "matplotlib>=3.5",
    "tqdm>=4.60",
    "jsonargparse[signatures]>=4.27.7",
    "optuna>=3.0",
    "optuna-integration[pytorch-lightning]",
]

[project.optional-dependencies]
dev = ["ruff>=0.1.0", "mypy>=1.0", "pre-commit>=3.0"]

[project.scripts]
b1-train = "b1prediction.app:main"
b1 = "b1prediction.app:main"

[project.urls]
Homepage = "https://github.com/yourusername/b1prediction"
Repository = "https://github.com/yourusername/b1prediction"
Documentation = "https://github.com/yourusername/b1prediction#readme"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
b1prediction = ["py.typed"]

# MyPy section
[tool.mypy]
warn_return_any = false
check_untyped_defs = true
warn_no_return = true
warn_unreachable = true
exclude = ["docs"]
enable_error_code = ["ignore-without-code"]
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["h5py"]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
extend-exclude = ["__init__.py"]
exclude = ["docs/**"]

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "FA",  # flake8-future-annotations
    "I",   # isort
    "N",   # pep8-naming
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "PIE", # flake8-pie
    # "PL",  # PyLint
    "PTH", # flake8-use-pathlib
    "T20", # flake8-print
    "Q",   # flake8-quotes
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
    "ERA", # flake8-eradicate
]
extend-select = [
    "ANN001", #  type annotation for function argument
    "ANN201", #  return type annonation public function
    "ANN205", #  return type annonation static method
    "ANN401", #  any type annotation
    "BLE001", #  blind exception
    "D107",   #  missing docstring in __init__
    "D417",   #  undocumented-parameter
]
ignore = [
    "N999",   #  invalid module name
    "COM812", #  missing-trailing-comma (conflict with formatter)
    "SIM108", #  if-else-block-instead-of-if-exp
    "A005",   #  stdlib-module-shadowing
    "T20",    #  print-statement
    "B008",   #  function call in default argument
]

[tool.ruff.lint.isort]
force-single-line = false
split-on-trailing-comma = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false

[tool.typos.default]
locale = "en-us"
check-filename = false
extend-ignore-re = [
    "(?Rm)^.*(#|//)\\s*noqa:\\s*typos", # "# noqa: typos" to ignore typos
]

[tool.typos.default.extend-words]
Reson = "Reson"   # required for Proc. Intl. Soc. Mag. Reson. Med.
iy = "iy"
arange = "arange" # torch.arange
Ba = "Ba"
wht = "wht"       # Brainweb tissue class
ND = "ND"         # Short for N-dimensional
